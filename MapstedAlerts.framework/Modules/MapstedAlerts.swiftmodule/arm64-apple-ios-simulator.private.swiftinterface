// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapstedAlerts
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreData
import DeveloperToolsSupport
import EventKit
import Foundation
import JavaScriptCore
@_exported import MapstedAlerts
@_spi(AlertsPrivateApi) @_spi(InternalImages) import MapstedCore
import MapstedTriggersCore
import MobileCoreServices
import Swift
import SwiftUI
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class CMSAlertInfo : Swift.Codable {
  final public let alerts: [MapstedAlerts.CMSAlert]?
  final public let syncId: Swift.String?
  final public let imageBaseUrl: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSAlert : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSActionPayload : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSAlertConfiguration : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSAlertCommunication : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSAlertSchedule : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSStyles : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CMSEntityZone : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSEntityZones : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class CMSModifiedLocations : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class EntityStyle : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class IconStyle : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSAlertTrigger : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSAlertTriggerLocation : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSAlertTriggerBehavior : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSAlertEntity : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct RecurrenceRule {
  public var calendar: Foundation.Calendar
  public var frequency: MapstedAlerts.RecurrenceFrequency
  public var interval: Swift.Int
  public var firstDayOfWeek: EventKit.EKWeekday
  public var startDate: Foundation.Date
  public var recurrenceEnd: EventKit.EKRecurrenceEnd?
  public var bysetpos: [Swift.Int]
  public var byyearday: [Swift.Int]
  public var bymonth: [Swift.Int]
  public var byweekno: [Swift.Int]
  public var bymonthday: [Swift.Int]
  public var byweekday: [EventKit.EKWeekday]
  public var byhour: [Swift.Int]
  public var byminute: [Swift.Int]
  public var bysecond: [Swift.Int]
  public var rdate: MapstedAlerts.InclusionDate?
  public var exdate: MapstedAlerts.ExclusionDate?
  public init(frequency: MapstedAlerts.RecurrenceFrequency)
  public init?(rruleString: Swift.String)
  public func toRRuleString() -> Swift.String
}
public enum RecurrenceFrequency {
  case yearly
  case monthly
  case weekly
  case daily
  case hourly
  case minutely
  case secondly
  public static func == (a: MapstedAlerts.RecurrenceFrequency, b: MapstedAlerts.RecurrenceFrequency) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CMSAlertTriggerNotifiable {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AlertSearchable {
  public var isEmergency: Swift.Bool
  public var alertImageBaseUrl: Swift.String
  public var alertName: Swift.String
  public var alertType: Swift.String
  public var alertMessage: Swift.String
  public var alertStatus: Swift.String
  public var alertIconLight: Swift.String?
  public var alertIconDark: Swift.String?
  public var alertIconImage: Swift.String?
  public var recurrenceRule: Swift.String
  public var startDate: Foundation.Date?
  public var endDate: Foundation.Date?
  public var duration: Swift.Float
  public var alertJSON: Swift.String
  public var showInListView: Swift.Bool
  public var entityFillColor: Swift.String
  public var autoDismiss: Swift.Bool {
    get
  }
  public var activeTriggerId: Swift.String?
  public var id: Swift.String
  public var propertyId: Swift.Int
  public var homeEntities: [MapstedCore.HomeEntity]
  public var routeToEntities: [MapstedCore.HomeEntity]
  public var routeToLocations: [MapstedCore.MNTag]
  public var modifiedEntities: [MapstedCore.HomeEntity]
  public var triggerNotifiables: [MapstedAlerts.CMSAlertTriggerNotifiable]
  public var image: UIKit.UIImage? {
    get
  }
  public var imageBaseUrlString: Swift.String? {
    get
  }
  public var imageIdString: Swift.String? {
    get
  }
  public var isMultiBuilding: Swift.Bool {
    get
  }
  public func hasMatchForText(searchText: Swift.String?) -> Swift.Bool
  public func containsTrigger(id triggerId: Swift.String) -> Swift.Bool
  public func occurrencesBetween(startDate: Foundation.Date, endDate: Foundation.Date) -> [Foundation.Date]
  public func nextOccurrence(fromDate: Foundation.Date? = nil) -> Foundation.Date?
  public func lastOccurrence(fromDate: Foundation.Date? = nil) -> Foundation.Date?
  public func isCurrentlyActive() -> Swift.Bool
  @objc deinit
}
extension MapstedAlerts.AlertSearchable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MapstedAlerts.AlertSearchable : MapstedCore.CMSSearchable {
  public var isEmergencyAlert: Swift.Bool {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var matchWord: (MapstedCore.MapstedCoreSearchApi.SearchableItemType, Swift.String) {
    get
    set
  }
  public var mapDataType: MapstedCore.MNDataType {
    get
    set
  }
  public var isBuilding: Swift.Bool {
    get
  }
  public var buildingId: Swift.Int {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public var categoryUid: Swift.String {
    get
  }
  public var buildingName: Swift.String {
    get
  }
  public var categoryTags: [Swift.String] {
    get
  }
  public var categoryTagUids: [Swift.String] {
    get
  }
  public var locations: [MapstedCore.MNMercatorZone] {
    get
  }
  public var entityZones: [MapstedCore.MNEntityZone] {
    get
  }
  public func keywords() -> [Swift.String]
  public var entities: [MapstedCore.MNSearchEntity] {
    get
  }
  public func inRecents(forSearch: Swift.Bool) -> Swift.Bool
  public var toolTipName: Swift.String {
    get
  }
}
extension MapstedAlerts.AlertSearchable : MapstedTriggersCore.TriggerCreative {
  public var titleString: Swift.String {
    get
  }
  public var headlineString: Swift.String {
    get
  }
  public var bodyStringAttributed: Foundation.NSAttributedString {
    get
  }
  public var logoImage: UIKit.UIImage? {
    get
  }
  public var baseUrlForImages: Swift.String {
    get
  }
  public var logoImageId: Swift.String {
    get
  }
  public var firstImageId: Swift.String {
    get
  }
  public var negativeText: Swift.String {
    get
  }
  public var positiveText: Swift.String {
    get
  }
  public var negativeAction: Swift.String? {
    get
  }
  public var positiveAction: Swift.String? {
    get
  }
  public var triggerType: MapstedTriggersCore.TriggerType {
    get
  }
  public var autoDismissedPopup: Swift.Bool {
    get
  }
}
public protocol AlertsManagementInterface {
  func fetchActiveAlertsForProperty(id propertyId: Swift.Int) -> [MapstedAlerts.AlertSearchable]
  func fetchEmergencyAlertsForProperty(id propertyId: Swift.Int) -> [MapstedAlerts.AlertSearchable]
  func fetchEmergencyAlertById(alertId: Swift.String, completion: ((Swift.Bool) -> ())?) -> MapstedAlerts.AlertSearchable?
  func removeNonActiveAlertsFromProperty(propertyId: Swift.Int)
  func fetchAllAlertsForProperty(id propertyId: Swift.Int) -> [MapstedAlerts.AlertSearchable]
  func removeAllAlertsForProperty(propertyId: Swift.Int)
}
@_spi(InternalMapstedAlerts) @_hasMissingDesignatedInitializers public class AlertsManagerInternal {
  @_spi(InternalMapstedAlerts) public static let shared: any MapstedAlerts.AlertsManagementInterface
  @_spi(InternalMapstedAlerts) @objc deinit
}
public struct Iterator {
  public static let endlessRecurrenceCount: Swift.Int
}
extension MapstedAlerts.RecurrenceRule {
  public func allOccurrences(endless endlessRecurrenceCount: Swift.Int = Iterator.endlessRecurrenceCount) -> [Foundation.Date]
  public func occurrences(between date: Foundation.Date, and otherDate: Foundation.Date, endless endlessRecurrenceCount: Swift.Int = Iterator.endlessRecurrenceCount) -> [Foundation.Date]
}
@objc @_inheritsConvenienceInitializers public class PropertyDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.PropertyDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertCommunicationDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertCommunicationDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertConfigurationDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertConfigurationDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertLanguageDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertLanguageDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertScheduleDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertScheduleDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertTargetDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTargetDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertTriggerBehaviorDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTriggerBehaviorDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertTriggerDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTriggerDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertTriggerEntityDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTriggerEntityDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AlertTriggerLocationDO : CoreData.NSManagedObject {
  @nonobjc public class func createFetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTriggerLocationDO>
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol AlertScheduleEventProtocol : AnyObject {
  func handleEventBeginFor(alert: MapstedAlerts.AlertSearchable)
  func handleEventEndFor(alert: MapstedAlerts.AlertSearchable)
}
public protocol AlertSchedulerInterface {
  func startProcessingAlertsFor(propertyId: Swift.Int, delegate: any MapstedAlerts.AlertScheduleEventProtocol)
  func stopProcessingAlertsFor(propertyId: Swift.Int)
}
@_spi(InternalMapstedAlerts) @_hasMissingDesignatedInitializers public class AlertSchedulerInternal {
  @_spi(InternalMapstedAlerts) public static let shared: any MapstedAlerts.AlertSchedulerInterface
  @_spi(InternalMapstedAlerts) @objc deinit
}
public struct InclusionDate {
  public var dates: [Foundation.Date] {
    get
  }
  public init(dates: [Foundation.Date])
  public init?(rdateString string: Swift.String)
  public func toRDateString() -> Swift.String
}
public protocol AlertsOnChangedListener : AnyObject {
  func onChangeInOngoingAlerts(propertyId: Swift.Int, before: [MapstedAlerts.AlertSearchable], after: [MapstedAlerts.AlertSearchable])
}
public protocol UserAtLocationListener : AnyObject {
  func onNotifyAlert(alert: MapstedAlerts.AlertSearchable)
}
public enum AlertApiError : Swift.Error {
  case CoreSDKNotInitialized
  case AlertsApiNotInitialized
  case NotValidAlert
  case NotValidScheduledAlert
  case NotValidEmergencyAlert
  case UnableToProcessNotification
  public static func == (a: MapstedAlerts.AlertApiError, b: MapstedAlerts.AlertApiError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AlertsApiInterface : MapstedTriggersCore.InAppNotificationInterface {
  func addUserAtLocationListener(listener: any MapstedAlerts.UserAtLocationListener)
  func removeUserAtLocationListener(listener: any MapstedAlerts.UserAtLocationListener)
  func addAlertChangeListener(propertyId: Swift.Int, listener: any MapstedAlerts.AlertsOnChangedListener)
  func removeAlertChangeListener(propertyId: Swift.Int, listener: any MapstedAlerts.AlertsOnChangedListener)
  func sendFirebaseToken(token: Swift.String, appIdentifier: Swift.String)
  func processNotification(userInfo: [Swift.AnyHashable : Any], completion: (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  func getOngoingAlertsForProperty(propertyId: Swift.Int) -> [MapstedAlerts.AlertSearchable]
  func fetchEmergencyAlerts(propertyId: Swift.Int, callback: ([MapstedAlerts.AlertSearchable]) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class AlertsApi {
  public static let shared: any MapstedAlerts.AlertsApiInterface
  public static func initialize(completion: (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  public static func hasInit() -> Swift.Bool
  @objc deinit
}
public class CMSEmergencyAlertInfo : Swift.Codable {
  final public let alerts: [MapstedAlerts.CMSEmergencyAlert]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSEmergencyAlert : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSEmergencyAlertConfiguration : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSLocations : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class CMSArbitraryLocation : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CMSZone : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CMSShape : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public class CMSCoordinate : Swift.Codable {
  public init(longitude: Swift.Double, latitude: Swift.Double)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct RRule {
  public static let dateFormatter: Foundation.DateFormatter
  public static let ymdDateFormatter: Foundation.DateFormatter
  public static func ruleFromString(_ string: Swift.String) -> MapstedAlerts.RecurrenceRule?
  public static func stringFromRule(_ rule: MapstedAlerts.RecurrenceRule) -> Swift.String
}
extension MapstedCore.MNNetworkManager {
  public func cmsFetchAlertsForProperty(id propertyId: Swift.Int, completion: ((MapstedAlerts.CMSAlertInfo?) -> ())? = nil)
  public func cmsFetchEmergencyAlertsForProperties(id propertyIds: [Swift.Int], completion: ((MapstedAlerts.CMSEmergencyAlertInfo?) -> ())? = nil)
  public func cmsFetchEmergencyAlertsById(alertId: Swift.String, completion: ((MapstedAlerts.CMSEmergencyAlertInfo?) -> ())? = nil)
  public func cmsFetchLatestSyncIdForPropertyAlerts(id propertyId: Swift.Int, completion: ((Swift.String?) -> ())? = nil)
}
public struct ExclusionDate {
  public var dates: [Foundation.Date] {
    get
  }
  public var component: Foundation.Calendar.Component! {
    get
  }
  public init(dates: [Foundation.Date], granularity component: Foundation.Calendar.Component)
  public init?(exdateString string: Swift.String, granularity component: Foundation.Calendar.Component)
  public func toExDateString() -> Swift.String?
}
extension EventKit.EKWeekday : Swift.Comparable {
}
public func < (lhs: EventKit.EKWeekday, rhs: EventKit.EKWeekday) -> Swift.Bool
public func == (lhs: EventKit.EKWeekday, rhs: EventKit.EKWeekday) -> Swift.Bool
extension MapstedAlerts.AlertCommunicationDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertCommunicationDO>
  @objc @NSManaged dynamic public var currentVisitors: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mobile: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pastVisitorDays: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pastVisitors: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var web: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlert: MapstedAlerts.AlertDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var triggers: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertCommunicationDO {
  @objc(addTriggersObject:) @NSManaged dynamic public func addToTriggers(_ value: MapstedAlerts.AlertTriggerDO)
  @objc(removeTriggersObject:) @NSManaged dynamic public func removeFromTriggers(_ value: MapstedAlerts.AlertTriggerDO)
  @objc(addTriggers:) @NSManaged dynamic public func addToTriggers(_ values: Foundation.NSSet)
  @objc(removeTriggers:) @NSManaged dynamic public func removeFromTriggers(_ values: Foundation.NSSet)
}
extension MapstedAlerts.AlertCommunicationDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertConfigurationDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertConfigurationDO>
  @objc @NSManaged dynamic public var audio: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var autoDismiss: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var enableDetour: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastingAlert: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var listView: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mapShowInternal: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var priority: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timedDelayAlert: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vibration: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlert: MapstedAlerts.AlertDO? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertConfigurationDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertDO>
  @objc @NSManaged dynamic public var alertId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alertJSON: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alertModifiedLocationsJSON: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alertRouteToLocationsJSON: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateCreated: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityFillColor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isEmergency: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var communication: MapstedAlerts.AlertCommunicationDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var configuration: MapstedAlerts.AlertConfigurationDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var language: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofProperty: MapstedAlerts.PropertyDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var schedule: MapstedAlerts.AlertScheduleDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var targets: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertDO {
  @objc(addLanguageObject:) @NSManaged dynamic public func addToLanguage(_ value: MapstedAlerts.AlertLanguageDO)
  @objc(removeLanguageObject:) @NSManaged dynamic public func removeFromLanguage(_ value: MapstedAlerts.AlertLanguageDO)
  @objc(addLanguage:) @NSManaged dynamic public func addToLanguage(_ values: Foundation.NSSet)
  @objc(removeLanguage:) @NSManaged dynamic public func removeFromLanguage(_ values: Foundation.NSSet)
}
extension MapstedAlerts.AlertDO {
  @objc(addTargetsObject:) @NSManaged dynamic public func addToTargets(_ value: MapstedAlerts.AlertTargetDO)
  @objc(removeTargetsObject:) @NSManaged dynamic public func removeFromTargets(_ value: MapstedAlerts.AlertTargetDO)
  @objc(addTargets:) @NSManaged dynamic public func addToTargets(_ values: Foundation.NSSet)
  @objc(removeTargets:) @NSManaged dynamic public func removeFromTargets(_ values: Foundation.NSSet)
}
extension MapstedAlerts.AlertDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertLanguageDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertLanguageDO>
  @objc @NSManaged dynamic public var alertMessage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alertName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alertStatus: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alertType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconDark: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconImage: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iconLight: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlert: MapstedAlerts.AlertDO? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertLanguageDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertScheduleDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertScheduleDO>
  @objc @NSManaged dynamic public var durationInHours: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recurrence: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var startDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlert: MapstedAlerts.AlertDO? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertScheduleDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertTargetDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTargetDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cmsEntityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlert: MapstedAlerts.AlertDO? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertTargetDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertTriggerBehaviorDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTriggerBehaviorDO>
  @objc @NSManaged dynamic public var keywordList: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlertTrigger: MapstedAlerts.AlertTriggerDO? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertTriggerBehaviorDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertTriggerDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTriggerDO>
  @objc @NSManaged dynamic public var triggerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var behavior: MapstedAlerts.AlertTriggerBehaviorDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location: MapstedAlerts.AlertTriggerLocationDO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlertCommunication: MapstedAlerts.AlertCommunicationDO? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertTriggerDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertTriggerEntityDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTriggerEntityDO>
  @objc @NSManaged dynamic public var buildingId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floorId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nameString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlertTriggerLocation: MapstedAlerts.AlertTriggerLocationDO? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertTriggerEntityDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.AlertTriggerLocationDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.AlertTriggerLocationDO>
  @objc @NSManaged dynamic public var activationDistance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var activationZone: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var autoDismissedPopup: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var direction: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entities: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ofAlertTrigger: MapstedAlerts.AlertTriggerDO? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.AlertTriggerLocationDO {
  @objc(addEntitiesObject:) @NSManaged dynamic public func addToEntities(_ value: MapstedAlerts.AlertTriggerEntityDO)
  @objc(removeEntitiesObject:) @NSManaged dynamic public func removeFromEntities(_ value: MapstedAlerts.AlertTriggerEntityDO)
  @objc(addEntities:) @NSManaged dynamic public func addToEntities(_ values: Foundation.NSSet)
  @objc(removeEntities:) @NSManaged dynamic public func removeFromEntities(_ values: Foundation.NSSet)
}
extension MapstedAlerts.AlertTriggerLocationDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.PropertyDO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MapstedAlerts.PropertyDO>
  @objc @NSManaged dynamic public var imageBaseUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var propertyId: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var syncId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var alerts: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MapstedAlerts.PropertyDO {
  @objc(addAlertsObject:) @NSManaged dynamic public func addToAlerts(_ value: MapstedAlerts.AlertDO)
  @objc(removeAlertsObject:) @NSManaged dynamic public func removeFromAlerts(_ value: MapstedAlerts.AlertDO)
  @objc(addAlerts:) @NSManaged dynamic public func addToAlerts(_ values: Foundation.NSSet)
  @objc(removeAlerts:) @NSManaged dynamic public func removeFromAlerts(_ values: Foundation.NSSet)
}
extension MapstedAlerts.PropertyDO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension MapstedAlerts.RecurrenceFrequency : Swift.Equatable {}
extension MapstedAlerts.RecurrenceFrequency : Swift.Hashable {}
extension MapstedAlerts.AlertApiError : Swift.Equatable {}
extension MapstedAlerts.AlertApiError : Swift.Hashable {}
