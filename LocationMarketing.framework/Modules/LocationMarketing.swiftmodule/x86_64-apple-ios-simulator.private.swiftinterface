// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LocationMarketing
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreLocation
import DeveloperToolsSupport
import Foundation
@_spi(LocMarketingPrivateApi) @_spi(InternalImages) import MapstedCore
import MapstedTriggersCore
import MobileCoreServices
import Swift
import SwiftUI
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc @_hasMissingDesignatedInitializers public class Region : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CampaignCreativeCollectionCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor @preconcurrency public var campaignView: LocationMarketing.CampaignCreativeView!
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CampaignCreativeTableCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency public var campaignView: LocationMarketing.CampaignCreativeView!
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForReuse()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CampaignCreativeView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var delegate: (any MapstedCore.LocationMarketingCreativeDelegate)?
  @_Concurrency.MainActor @preconcurrency public var isIndoor: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var showPropertyInfo: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var enableFavorite: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var enableShare: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var navigateAction: (() -> ())?
  @_Concurrency.MainActor @preconcurrency public var campaign: MapstedCore.Campaign? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var showingDescription: Swift.Bool
  @objc deinit
}
public enum LocMarketingError : Swift.Error {
  case CoreSDKNotInitialized
  case LocMarketingNotInitialized
  case NotValidCampaign
  case UnableToProcessNotification
  public static func == (a: LocationMarketing.LocMarketingError, b: LocationMarketing.LocMarketingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LocMarketingApiInterface : MapstedTriggersCore.InAppNotificationInterface, MapstedTriggersCore.PushAppNotificationPayload {
  func openWebURL(parent: UIKit.UIViewController, urlString: Swift.String)
  func getCampaigns(propertyId: Swift.Int, buildingId: Swift.Int, entityId: Swift.Int) -> [MapstedCore.Campaign]?
  func fetchCampaignsForProperty(propertyId: Swift.Int, completion: (([MapstedCore.Campaign]?) -> Swift.Void)?)
  func setListener(listener: any MapstedTriggersCore.LocMarketingListener)
  func addNotificationListener(_ listener: any MapstedTriggersCore.MarketingBannerActionDelegate)
  func removeNotificationListener(_ listener: any MapstedTriggersCore.MarketingBannerActionDelegate)
}
@_hasMissingDesignatedInitializers public class LocMarketingApi {
  public static let shared: any LocationMarketing.LocMarketingApiInterface
  public static func initialize(completion: (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  public static func hasInit() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ViewControllerUtils {
  public static func topMostViewController(base: UIKit.UIViewController? = UIApplication.shared
        .connectedScenes
        .compactMap { $0 as? UIWindowScene }
        .flatMap { $0.windows }
        .first(where: { $0.isKeyWindow })?.rootViewController) -> UIKit.UIViewController?
  @objc deinit
}
extension MapstedCore.Creative : MapstedTriggersCore.TriggerCreative {
  public var titleString: Swift.String {
    get
  }
  public var headlineString: Swift.String {
    get
  }
  public var bodyStringAttributed: Foundation.NSAttributedString {
    get
  }
  public var logoImage: UIKit.UIImage? {
    get
  }
  public var baseUrlForImages: Swift.String {
    get
  }
  public var logoImageId: Swift.String {
    get
  }
  public var firstImageId: Swift.String {
    get
  }
  public var negativeText: Swift.String {
    get
  }
  public var positiveText: Swift.String {
    get
  }
  public var positiveAction: Swift.String? {
    get
  }
  public var negativeAction: Swift.String? {
    get
  }
  public var triggerType: MapstedTriggersCore.TriggerType {
    get
  }
  public var autoDismissedPopup: Swift.Bool {
    get
  }
}
extension MapstedCore.Creative {
  public var positiveTextLanguage: Swift.String {
    get
  }
  public var negativeTextLanguage: Swift.String {
    get
  }
  public var feed_title: Swift.String {
    get
  }
  public var baseImageUrl: Swift.String {
    get
  }
  public var headlineLanguage: Swift.String {
    get
  }
  public var titleLanguage: Swift.String {
    get
  }
  public var bodyLanguage: Swift.String {
    get
  }
  public var logo: Swift.String {
    get
  }
  public var firstImage: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class PropertyGeofenceApi : ObjectiveC.NSObject {
  public var enabledRegions: [Swift.Int]
  public var enableAllRegions: Swift.Bool
  public var messageFormatString: Swift.String {
    get
    set
  }
  public var arrNearByPropertyIds: [Swift.Int]
  public static let shared: LocationMarketing.PropertyGeofenceApi
  @objc deinit
  public func boundaryCheck(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func addBoundary(regionId: Swift.Int, name: Swift.String, centroid: MapstedCore.MNMercator, radius: Swift.Double, northEastPoint: MapstedCore.MNMercator, southWestPoint: MapstedCore.MNMercator)
  public func removeBoundary(regionId: Swift.Int)
}
extension LocationMarketing.PropertyGeofenceApi : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
}
extension LocationMarketing.PropertyGeofenceApi : MapstedCore.NearbyPropertiesListener {
  public func addNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
  public func removeNearbyProperties(propertyIds: Swift.Set<Swift.Int>)
}
extension LocationMarketing.LocMarketingError : Swift.Equatable {}
extension LocationMarketing.LocMarketingError : Swift.Hashable {}
