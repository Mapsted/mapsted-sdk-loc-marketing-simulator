// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapstedTriggersCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
@_spi(InternalImages) import MapstedCore
@_exported import MapstedTriggersCore
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Action {
}
public enum ActionText : Swift.String {
  case Navigate
  case Website
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InAppNotifyViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var delegate: (any MapstedTriggersCore.MapstedNotificationDelegate)?
  @_Concurrency.MainActor(unsafe) public var creative: (any MapstedTriggersCore.TriggerCreative)?
  @_Concurrency.MainActor(unsafe) public var entity: MapstedCore.HomeEntity?
  @_Concurrency.MainActor(unsafe) public var websiteUrl: Swift.String?
  @_Concurrency.MainActor(unsafe) public var negativeActionHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var positiveActionHandler: ((MapstedTriggersCore.ActionText) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class MarketingPageViewController : UIKit.UIPageViewController {
  @_Concurrency.MainActor(unsafe) final public var marketingDelegate: (any MapstedTriggersCore.MarketingBannerUIDelegate)?
  @_Concurrency.MainActor(unsafe) public static func instantiateViewController() -> MapstedTriggersCore.MarketingPageViewController?
  @_Concurrency.MainActor(unsafe) final public func removeAlert(propertyId: Swift.Int, alertId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func setUpPage(creative: (any MapstedTriggersCore.TriggerCreative)?, notificationHandler: (() -> Swift.Void)? = nil, propertyId: Swift.Int? = nil, alertId: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MapstedTriggersCore.MarketingPageViewController : UIKit.UIPageViewControllerDataSource, UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func presentationIndex(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
extension MapstedTriggersCore.MarketingPageViewController : MapstedTriggersCore.MarketingBannerUIDelegate {
  @_Concurrency.MainActor(unsafe) final public func remove(vc: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) final public func reset()
  @objc @_Concurrency.MainActor(unsafe) final public func closeBanner()
}
public protocol LocMarketingListener {
  func openWebsite(websiteURL: Swift.String) -> Swift.Bool
  func navigateToMap(homeEntities: [MapstedCore.HomeEntity])
  func dismiss()
}
public protocol MapstedNotificationDelegate {
  func dismiss()
  func navigateToMap(homeEntities: [MapstedCore.HomeEntity])
  func openWebsite(websiteURL: Swift.String) -> Swift.Bool
}
extension MapstedTriggersCore.MapstedNotificationDelegate {
  public func dismiss()
  public func openWebsite(websiteURL: Swift.String) -> Swift.Bool
}
public enum TriggerType {
  case Alert
  case Campaign
  case Unknown
  public static func == (a: MapstedTriggersCore.TriggerType, b: MapstedTriggersCore.TriggerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol TriggerCreative {
  var titleString: Swift.String { get }
  var headlineString: Swift.String { get }
  var bodyStringAttributed: Foundation.NSAttributedString { get }
  var logoImage: UIKit.UIImage? { get }
  var baseUrlForImages: Swift.String { get }
  var logoImageId: Swift.String { get }
  var firstImageId: Swift.String { get }
  var negativeText: Swift.String { get }
  var positiveText: Swift.String { get }
  var negativeAction: Swift.String? { get }
  var positiveAction: Swift.String? { get }
  var triggerType: MapstedTriggersCore.TriggerType { get }
  var autoDismissedPopup: Swift.Bool { get }
}
public protocol MarketingBannerUIDelegate {
  func closeBanner()
  func remove(vc: UIKit.UIViewController)
}
extension MapstedTriggersCore.MarketingBannerUIDelegate {
  public func remove(vc: UIKit.UIViewController)
}
public protocol LocMarketingBannerActionDelegate {
  func showCampaign(campaignId: Swift.String)
}
public protocol AlertBannerActionDelegate {
  func showAlert(propertyId: Swift.Int, alertId: Swift.String)
  func showEmergencyAlert(alertId: Swift.String)
}
public protocol MarketingBannerActionDelegate {
  func showCampaign(campaignId: Swift.String, propertyId: Swift.Int)
  func showAlert(propertyId: Swift.Int, alertId: Swift.String)
  func showEmergencyAlert(alertId: Swift.String)
}
public enum NotifyCategory {
  case Alert
  case EmergencyAlert
  case Campaign
  public static func == (a: MapstedTriggersCore.NotifyCategory, b: MapstedTriggersCore.NotifyCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.String {
  public var html2Attributed: Foundation.NSAttributedString? {
    get
  }
  public var html2PlainText: Swift.String {
    get
  }
}
extension UIKit.UIImage {
  public static func loadFromModule(imageName: Swift.String) -> UIKit.UIImage?
  public func createLocalURL() -> Foundation.URL?
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class HTMLLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol InAppNotificationInterface {
  func processNotification(response: UserNotifications.UNNotificationResponse, window: UIKit.UIWindow?, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func roundCorners(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public var visibleViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static func getVisibleViewControllerFrom(_ vc: UIKit.UIViewController?) -> UIKit.UIViewController?
}
@objc @_inheritsConvenienceInitializers open class MapstedTriggersManager : ObjectiveC.NSObject {
  public static let notify: MapstedTriggersCore.MarketingPageViewController?
  final public func openWebURL(parent: UIKit.UIViewController, urlString: Swift.String)
  final public func addNotification(identifier: Swift.String, timeInSeconds: Swift.Int, content: UserNotifications.UNMutableNotificationContent)
  final public func removeNotifications(identifiers: [Swift.String])
  final public func removeNotifications(pattern: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension MapstedTriggersCore.ActionText : Swift.Equatable {}
extension MapstedTriggersCore.ActionText : Swift.Hashable {}
extension MapstedTriggersCore.ActionText : Swift.RawRepresentable {}
extension MapstedTriggersCore.TriggerType : Swift.Equatable {}
extension MapstedTriggersCore.TriggerType : Swift.Hashable {}
extension MapstedTriggersCore.NotifyCategory : Swift.Equatable {}
extension MapstedTriggersCore.NotifyCategory : Swift.Hashable {}
